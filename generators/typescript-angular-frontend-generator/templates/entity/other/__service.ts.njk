---
id: service
dependencies: [model]
constants:
  name: '{{ entity.name | pascalCase }}Service'
---
import {HttpClient, HttpParams} from "@angular/common/http";
import {environment} from "../../environments/environment";
import {PageResponse} from "../models/page-response";
import { {{ dependencies.model.name }} } from "../models/{{ entity.name | kebabCase }}";
import { Injectable } from "@angular/core";
import { SortHelper } from "../util/sort-helper";
import { Sort } from "../models/sort";

@Injectable({
  providedIn: 'root'
})
export class {{ constants.name }} {
  constructor(private httpClient: HttpClient) { }

  public create(entity: {{ dependencies.model.name }}) {
    return this.httpClient.post<{{ dependencies.model.name }}>(`${environment.backend}/api/v1/{{ entity.name | urlCase }}`, entity);
  }

  public update(id: number, entity: {{ dependencies.model.name }}) {
    return this.httpClient.put<{{ dependencies.model.name }}>(`${environment.backend}/api/v1/{{ entity.name | urlCase }}/${id}`, entity);
  }

  public delete(id: number) {
    return this.httpClient.delete(`${environment.backend}/api/v1/{{ entity.name | urlCase }}/${id}`);
  }

  public detail(id: number) {
    return this.httpClient.get<{{ dependencies.model.name }}>(`${environment.backend}/api/v1/{{ entity.name | urlCase }}/${id}`);
  }

  public list(page: number, sort: Sort | null = null, filters: HttpParams = new HttpParams()) {
    let params = filters.set('page', page.toString());

    if (sort) {
      params = params.set('sort', SortHelper.convertSortToString(sort));
    }

    return this.httpClient.get<PageResponse<{{ dependencies.model.name }}>>(`${environment.backend}/api/v1/{{ entity.name | urlCase }}`, {
      params,
    });
  }
}

---
id: item-select-component
constants:
  name: '{{ entity.name | pascalCase }}ItemSelectComponent'
dependencies: [service, model]
---
{% import 'partials/typescript.njk' as typescript %}
import { Component, OnDestroy, OnInit, Input, forwardRef } from '@angular/core';
import { FormBuilder, Validators, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { ToastService } from '@recognizebv/vwui-angular';
import { Subscription, firstValueFrom } from 'rxjs';
import { {{ dependencies.model.name }} } from '../../models/{{ entity.name | kebabCase }}';
import { {{ dependencies.service.name }} } from '../../services/{{ entity.name | kebabCase }}.service';
import {MultiSelectOptions} from "../../models/multi-select-options";
import { HttpParams } from '@angular/common/http';

@Component({
  selector: 'app-{{ entity.name | kebabCase }}-item-select',
  templateUrl: './{{ entity.name | kebabCase }}-item-select.component.html',
  styleUrls: ['./{{ entity.name | kebabCase }}-item-select.component.scss'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => {{ constants.name }}),
      multi: true
    }
  ],
})
export class {{ constants.name }} implements OnInit, OnDestroy, ControlValueAccessor {
  @Input() multiple = false;
  @Input() autoSelectSingleItem = false;
  @Input() public inputId?: string;
  public control = this.fb.control(null);
  public options: MultiSelectOptions<{{ dependencies.model.name }}> = {
    labelKey: '{{ (entity | mainProperty).name | camelCase }}',
    load: (page, search) => {
      let params = new HttpParams();

      if (search) {
        params = params.append('search', search);
      }

      return this.{{ entity.name | camelCase }}Service.list(page, undefined, params);
    },
  }

  private onChangeListener?: (value: any) => {{ dependencies.model.name }} | null;
  private onTouchedListener?: () => {{ dependencies.model.name }} | null;

  private subscriptions: Subscription[] = [];

  constructor(private fb: FormBuilder, private {{ entity.name | camelCase }}Service: {{ dependencies.service.name }}) {
  }

  ngOnInit(): void {
    this.subscriptions.push(
      this.control.valueChanges.subscribe(value => {
        this.onChangeListener && this.onChangeListener(value);
        this.onTouchedListener && this.onTouchedListener();
      }),
    )
  }

  ngOnDestroy() {
    this.subscriptions.forEach(it => it.unsubscribe());
  }

  writeValue(value: any) {
    this.control.setValue(value);
  }

  registerOnChange(fn: (value: {{ dependencies.model.name }} | null) => any) {
    this.onChangeListener = fn;
  }

  registerOnTouched(fn: () => {{ dependencies.model.name }} | null) {
    this.onTouchedListener = fn;
  }
}

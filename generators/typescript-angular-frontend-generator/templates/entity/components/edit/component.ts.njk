---
id: edit-component
constants:
  name: '{{ entity.name | pascalCase }}EditComponent'
dependencies: [service, model]
---
{% import 'partials/typescript.njk' as typescript %}
import { Component, OnDestroy } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { ToastService } from '@recognizebv/vwui-angular';
import { Subscription, firstValueFrom } from 'rxjs';
import { {{ dependencies.model.name }} } from 'src/app/models/{{ entity.name | kebabCase }}';
import { {{ dependencies.service.name }} } from 'src/app/services/{{ entity.name | kebabCase }}.service';

@Component({
  selector: 'app-{{ entity.name | kebabCase }}-edit',
  templateUrl: './{{ entity.name | kebabCase }}-edit.component.html',
  styleUrls: ['./{{ entity.name | kebabCase }}-edit.component.scss']
})
export class {{ constants.name }} implements OnDestroy {
  loading = false;
  form = this.fb.group({
    {% for field in entity.fields -%}
    {{ field.name | camelCase }}: [{{ typescript.defaultValue(field.type, field.required) }}, [{%- if field.required -%}Validators.required{%- endif -%}]],
    {% endfor %}
  })

  editing?: {{ dependencies.model.name }};
  private subscriptions: Subscription[] = [];

  constructor(private fb: FormBuilder, private vwuiToastService: ToastService, private {{ entity.name | camelCase }}Service: {{ dependencies.service.name }}, private router: Router, private activatedRoute: ActivatedRoute) {
    this.subscriptions.push(
      this.activatedRoute.data.subscribe((data) => {
        if (data['entity']) {
          this.form.patchValue(data['entity']);
          this.editing = data['entity'];
        } else {
          this.editing = undefined;
        }
      })
    )
  }

  get editMode() {
    return !!this.editing;
  }

  ngOnDestroy() {
    this.subscriptions.forEach((subscription) => subscription.unsubscribe());
  }

  async save() {
    if (this.form.invalid || this.loading) {
      return;
    }

    this.loading = true;

    try {
      const value = this.form.value as {{ dependencies.model.name }};

      if (this.editMode) {
          await firstValueFrom(this.{{ entity.name | camelCase }}Service.update(this.editing!.id, value));
      } else {
          await firstValueFrom(this.{{ entity.name | camelCase }}Service.create(value));
      }

      this.vwuiToastService.success('{{ entity.name | titleCase }} saved successfully');
      this.router.navigate(['/{{ entity.name | plural | urlCase }}']);
    } catch (error) {
      console.error(error);
      this.vwuiToastService.error('Something went wrong while saving the {{ entity.name | titleCase | lower }}');
    } finally {
      this.loading = false;
    }
  }
}

---
id: repository
constants:
    name: '{{ entity.name | pascalCase }}Repository'
    variableName: '{{ entity.name | camelCase }}Repository'
    import: '{{ variables.packageName }}.repository.{{ entity.name | pascalCase }}Repository'
dependencies: [entity]
---
{%- import 'partials/kotlin.njk' as kotlin -%}
{%- macro propertyPath(field) -%}
  {%- if field.searchable and field.type.target -%}
    cb.ilike(root.get<{{ kotlin.dataType(field.type, field.required) }}>("{{ field.name | camelCase }}").get<{{ kotlin.dataType((field.type.target | mainProperty).type, field.required) }}>("{{ (field.type.target | mainProperty).name | camelCase }}"), "%$search%"),
  {%- elif field.searchable -%}
    cb.ilike(root.get<{{ kotlin.dataType(field.type, field.required) }}>("{{ field.name | camelCase }}"), "%$search%"),
  {%- endif -%}
{%- endmacro -%}
package {{ variables.packageName }}.repository

import jakarta.persistence.criteria.Predicate
import {{ dependencies.entity.import }}
{% for related in (entity | findRelatedEntities) %}
import {{ variables.packageName }}.entity.{{ related.entity.name | pascalCase }}
{% endfor %}
import {{ variables.packageName }}.util.ilike
import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.data.jpa.repository.JpaSpecificationExecutor
import org.springframework.stereotype.Repository
import org.springframework.data.domain.Pageable

@Repository
interface {{ constants.name }} : JpaRepository<{{ dependencies.entity.name }}, Long>, JpaSpecificationExecutor<{{ dependencies.entity.name }}> {
    fun findBySearchQuery(pageable: Pageable, search: String? = null) = findAll(
        { root, cq, cb ->
            val predicates = mutableListOf<Predicate>()

            if (search?.isNotEmpty() == true) {
                predicates.add(
                    cb.or(
                        {% for field in entity.fields %}
                        {{ propertyPath(field) }}
                        {%- endfor %}
                    )
                )
            }

            cb.and(*predicates.toTypedArray())
        },
        pageable
    )
}


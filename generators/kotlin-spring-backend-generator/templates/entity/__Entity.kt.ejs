---
id: entity
constants:
    name: <%= toPascalCase(entity.name) %>
    variableName: <%= toCamelCase(entity.name) %>
    import: <%= variables.packageName %>.entity.<%= toPascalCase(entity.name) %>
dependencies: [dto]
---
package <%= variables.packageName %>.entity

import <%= dependencies.dto.import %>
import jakarta.persistence.*
import org.hibernate.annotations.CreationTimestamp
import org.hibernate.annotations.UpdateTimestamp
import java.time.ZonedDateTime

@Entity
class <%= constants.name %>(
    <% entity.fields.filter(it => it.required === true).forEach((field) => { %>
<%- include('/partials/entity-column.ejs', { field: field, nullable: false, constructor: true }); %>,
    <% }) %>
) {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    var id: Long? = null
    <% entity.fields.filter(it => it.required !== true).forEach((field) => { %>
<%- include('/partials/entity-column.ejs', { field: field, nullable: true, constructor: false }); %>
    <% }) %>
    @Column(nullable = false, updatable = false, columnDefinition = "TIMESTAMP DEFAULT NOW()")
    @CreationTimestamp
    var createdAt: ZonedDateTime = ZonedDateTime.now()

    @Column(nullable = false, columnDefinition = "TIMESTAMP DEFAULT NOW()")
    @UpdateTimestamp
    var updatedAt: ZonedDateTime = ZonedDateTime.now()

    fun applyDTO(dto: <%= dependencies.dto.name %>) {
        <% entity.fields.forEach((field) => { %>this.<%= field.name %> = dto.<%= field.name %>
        <% }) %>
    }
}

---
id: controller
dependencies: [dto, entity, repository]
constants:
    url: /api/v1/<%= toUrlCase(entity.name) %>
---
package <%= variables.packageName %>.controller

import <%= dependencies.entity.import %>
import <%= dependencies.dto.import %>
import <%= dependencies.repository.import %>
import org.springdoc.core.annotations.ParameterObject
import org.springframework.data.domain.Pageable
import org.springframework.data.web.PageableDefault
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.PutMapping
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RestController

@RestController
@RequestMapping("<%= constants.url %>", produces = ["application/json"])
class <%= dependencies.entity.name %>Controller(
    private val <%= dependencies.repository.variableName %>: <%= dependencies.repository.name %>,
) {
    @GetMapping("")
    fun list(
        @ParameterObject @PageableDefault(size = 20, sort = ["id"]) pageRequest: Pageable,
    ) = <%= dependencies.entity.variableName %>Repository.findAll(pageRequest)

    @PostMapping("")
    fun create(@RequestBody input: <%= dependencies.dto.name %>) = <%= dependencies.repository.variableName %>.save(
        <%= dependencies.entity.name %>(
            <% entity.fields.filter(it => it.required === true).forEach((field) => { %><%= field.name %> = input.<%= field.name %>,<% }) %>
        ).apply { applyDTO(input) }
    )

    @PutMapping("{entity}")
    fun update(@PathVariable entity: <%= dependencies.entity.name %>, @RequestBody input: <%= dependencies.dto.name %>)
        = <%= dependencies.repository.variableName %>.save(entity.apply { applyDTO(input) })

    @DeleteMapping("{entity}")
    fun delete(@PathVariable entity: <%= dependencies.entity.name %>) = <%= dependencies.repository.variableName %>.delete(entity)

    @GetMapping("{entity}")
    fun detail(@PathVariable entity: <%= dependencies.entity.name %>) = entity
}

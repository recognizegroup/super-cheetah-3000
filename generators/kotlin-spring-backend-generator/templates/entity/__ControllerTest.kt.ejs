---
dependencies: [entity, integrationtest, controller, fixture]
---
package <%= variables.packageName %>.controller

import <%= dependencies.entity.import %>
import <%= variables.packageName %>.AbstractIntegrationTest
import org.hamcrest.Matchers.equalTo
import org.hamcrest.Matchers.hasSize
import org.junit.jupiter.api.Test
import org.springframework.test.context.jdbc.Sql
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

internal class <%= dependencies.entity.name %>ControllerTest : AbstractIntegrationTest() {
<% if(entity.operations.read) { %>
    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Lists a set of <%= entity.name %> items`() {
        <% const listEntityTestData = testData.fetchTestDataForEntity(entity, 1) %>
        mockMvc
            .perform(get("<%= dependencies.controller.url %>"))
            .andExpect(status().isOk)
            .andExpect(jsonPath("$.content", hasSize<<%= dependencies.entity.name %>>(1)))<% entity.fields.forEach((field, index) => { %>
            .andExpect(jsonPath("$.content[0].<%= field.name %>", equalTo(<%- include('/partials/kotlin-data-value.ejs', { field, value: listEntityTestData[field.name] }); %>)))<% }) %>
    }
<% } %>
<% if(entity.operations.read) { %>
    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Retrieve a single <%= entity.name %>`() {
        <% const singleEntityTestData = testData.fetchTestDataForEntity(entity, 1) %>
        mockMvc
            .perform(get("<%= dependencies.controller.url %>/1"))
            .andExpect(status().isOk)<% entity.fields.forEach((field, index) => { %>
            .andExpect(jsonPath("<%= field.name %>", equalTo(<%- include('/partials/kotlin-data-value.ejs', { field, value: singleEntityTestData[field.name] }); %>)))<% }) %>
    }

    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Throws a not-found error when a <%= entity.name %> does not exist`() {
        mockMvc
            .perform(get("<%= dependencies.controller.url %>/0"))
            .andExpect(status().isNotFound)
    }
<% } %>
<% if(entity.operations.create) { %>
    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Create a <%= entity.name %>`() {
        <% const createEntityTestData = testData.fetchTestDataForEntity(entity, 2) %>
        mockMvc
            .perform(
                post("<%= dependencies.controller.url %>")
                    .contentType("application/json")
                    .content(
                        """
<%- JSON.stringify(createEntityTestData, null, 4) %>
                        """.trimIndent()
                    )
            )
            .andExpect(status().isOk)<% entity.fields.forEach((field, index) => { %>
            .andExpect(jsonPath("$.<%= field.name %>", equalTo(<%- include('/partials/kotlin-data-value.ejs', { field, value: createEntityTestData[field.name] }); %>)))<% }) %>
    }
<% } %>
<% if(entity.operations.update) { %>
    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Updates a <%= entity.name %>`() {
        <% const updateEntityTestData = testData.fetchTestDataForEntity(entity, 3) %>
        mockMvc
            .perform(
                put("<%= dependencies.controller.url %>/1")
                    .contentType("application/json")
                    .content(
                        """
<%- JSON.stringify(updateEntityTestData, null, 4) %>
                        """.trimIndent()
                    )
            )
            .andExpect(status().isOk)<% entity.fields.forEach((field, index) => { %>
            .andExpect(jsonPath("$.<%= field.name %>", equalTo(<%- include('/partials/kotlin-data-value.ejs', { field, value: updateEntityTestData[field.name] }); %>)))<% }) %>
    }
<% } %>
<% if(entity.operations.delete) { %>
    @Test
    @Sql(scripts = ["classpath:fixtures/<%= toKebabCase(entity.name) %>.sql"])
    fun `Deletes a <%= entity.name %>`() {
        mockMvc
            .perform(
                delete("<%= dependencies.controller.url %>/1")
            )
            .andExpect(status().isOk)
    }
<% } %>
}
